{"version":3,"sources":["../server.ts","../configs/configs.ts","../services/logger.ts","../middlewares/loggingMiddleware.ts","../middlewares/notFoundMiddleware.ts","../utils/type-guards.ts","../controllers/utils/periods.ts","../controllers/utils/validation.ts","../services/request.ts","../utils/helpers.ts","../handlers/utils/helpers.ts","../handlers/getViewsHandler.ts","../controllers/getViewsController.ts"],"sourcesContent":["import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\n\nimport { DEFAULT_PORT } from \"./configs/configs\";\nimport loggingMiddleware from \"./middlewares/loggingMiddleware\";\nimport notFoundMiddleware from \"./middlewares/notFoundMiddleware\";\nimport logger from \"./services/logger\";\nimport getViewsController from \"./controllers/getViewsController\";\n\ndotenv.config();\n\nconst app = express();\n\n// Middlewares\napp.use(cors({\n     origin: '*',\n}))\napp.use(loggingMiddleware);\n\n// Routes\napp.get(\"/\", (_, res) => {\n    res.send(\"Server running!\")\n});\n\napp.get(\"/get_views\", getViewsController);\n\n\n// Catch-all middleware\napp.use(notFoundMiddleware);\n\n\n// Starting the server\nconst port = process.env.PORT || DEFAULT_PORT;\n\napp.listen(port, () => {\n    logger.info(`Server listening to port: ${port}`);\n})\n","export const WIKIPEDIA_API_URL = \"https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia.org/all-access/all-agents\";\n\nexport const DEFAULT_TTL_IN_MINUTES = 120;\n\nexport const DEFAULT_PORT = 3030;","import chalk from 'chalk';\n\nclass Logger {\n  private getTimestamp() {\n    return new Date().toISOString();\n  }\n\n  public info(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.green('INFO')}: ${message}`;\n    console.log(log);\n  }\n\n  public error(message: string, err?: Error) {\n    const errorDetails = err ? `${message}, Error: ${err.message}` : message;\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.redBright('ERROR')}: ${errorDetails}`;\n    console.log(log);\n  }\n  \n  public warn(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.yellowBright('WARN')}: ${message}`;\n    console.log(log);\n  }\n  \n  public debug(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.cyanBright('DEBUG')}: ${message}`;\n    console.log(log);\n  }\n}\n\nexport default new Logger();\n","import type { Request, Response, NextFunction } from 'express';\n\nimport logger from '../services/logger';\n\nconst loggingMiddleware = (\n    req: Request,\n    _: Response,\n    next: NextFunction\n): void => {\n    // Gather log details\n    const remoteAddr = req.ip || req.socket.remoteAddress || '-';\n    const method = req.method;\n    const url = req.originalUrl || req.url;\n    const referrer = req.get('Referrer') || req.get('Referer') || '-';\n    const userAgent = req.get('User-Agent') || '-';\n\n    // Format log message\n    const logMessage = `\"${method}\" \"${url}\" \"${remoteAddr}\" \"${referrer}\" \"${userAgent}\"`;\n\n    logger.info(logMessage);\n\n    next();\n}\n\nexport default loggingMiddleware;","import type { Request, Response } from 'express';\n\nimport { ErrorMessage, StatusCode } from '../constants/response';\n\nconst notFoundMiddleware = (\n    _: Request,\n    res: Response,\n): void => {\n    res.status(StatusCode.NOT_FOUND).send({\n        error: ErrorMessage.RESOURCE_NOT_FOUND\n    });\n}\n\nexport default notFoundMiddleware","// Type guard to check if a value is a non-empty string\nexport const isNonEmptyString = (\n    value: unknown\n): value is string => {\n    return typeof value === \"string\" && value.trim().length > 0;\n}\n\n// Type guard to check if a value is a positive integer\nexport const isPositiveInteger = (\n    value: unknown\n): value is number => {\n    if (typeof value === \"string\") {\n        const num = Number(value);\n        return Number.isInteger(num) && num > 0;\n    }\n\n    return typeof value === \"number\" && Number.isInteger(value) && value > 0;\n}\n","import type { Granularity } from \"../../types/get_views\";\n\nexport const periodsMap =  new Map<number, Granularity>([\n    [30, 'daily'],\n    [90, 'weekly'],\n    [365, 'monthly']\n]);","import type { Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../../constants/response\";\nimport { isNonEmptyString, isPositiveInteger } from \"../../utils/type-guards\";\nimport { periodsMap } from \"./periods\";\nimport type { GetPageViewsPayload } from \"../../types/get_views\";\n\n\nexport const handleGetViewsQueryValidation = (\n    query: Record<string, unknown>,\n    res: Response): GetPageViewsPayload | undefined => {\n\n    let { period, name } = { ...query };\n    period = Number(period);\n\n    if (!period || !name) {\n        res.status(StatusCode.BAD_REQUEST).json({\n            error: ErrorMessage.MISSING_GET_VIEWS_QUERY_PARAMS\n        });\n        return;\n    }\n\n    if (!isPositiveInteger(period) || !isNonEmptyString(name)) {\n        res.status(StatusCode.BAD_REQUEST).json(\n            { error: ErrorMessage.WRONG_GET_VIEWS_QUERY_PARAMS }\n        );\n        return;\n    }\n\n    const granularity = periodsMap.get(period);\n\n    if (!granularity) {\n        res.status(StatusCode.BAD_REQUEST).send(\n            { error: `Period not allowed. Allowed periods are: ${Array.from(periodsMap.keys()).join(\", \")}` }\n        );\n        return;\n    }\n\n    return { granularity, period, name };\n}","import axios, { type AxiosInstance } from 'axios';\n\nimport { WIKIPEDIA_API_URL } from '../configs/configs';\nimport type { GetPageViewsPayload, PageViewsRetrievedData } from '../types/get_views';\nimport { getFormattedDate } from '../utils/helpers';\nimport logger from './logger';\n\ninterface RequestHandler {\n    getPageData(argsObj: GetPageViewsPayload): Promise<PageViewsRetrievedData | null>\n}\n\nclass RequestHandler {\n    static instance: RequestHandler | null = null;\n    private axiosInstance: AxiosInstance;\n\n    private constructor() {\n        const requestBaseUrl = WIKIPEDIA_API_URL;\n\n        this.axiosInstance = axios.create({\n            baseURL: requestBaseUrl,\n        });\n\n        console.log(\"Request class initialized with:\", requestBaseUrl);\n    }\n\n    static getInstance(): RequestHandler {\n        if (!RequestHandler.instance) {\n            RequestHandler.instance = new RequestHandler();\n        }\n        return RequestHandler.instance;\n    }\n\n    async getPageData(\n        argsObj: GetPageViewsPayload\n    ): Promise<PageViewsRetrievedData | null> {\n        try {\n            let { name, period, granularity } = { ...argsObj };\n\n            const currentDate = Date.now();\n            const startDate = currentDate - period * 24 * 60 * 60 * 1000;\n\n            if(granularity === \"weekly\") granularity = \"daily\";\n\n            const url = `/${name}/${granularity}/${getFormattedDate(startDate)}/${getFormattedDate(currentDate)}`;\n\n            const result = await this.axiosInstance.get(url)\n\n            return result.data;\n        } catch (err) {\n\n            return null;\n        }\n\n    }\n}\n\nexport default RequestHandler.getInstance();","export const getFormattedDate = (dateNumber: number) => {\n    const date = new Date(dateNumber);\n\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so +1\n    const day = String(date.getDate()).padStart(2, '0');\n\n    return `${year}${month}${day}`;\n  };","import { periodsMap } from '../../controllers/utils/periods';\nimport type { PageViewsItem, PageViewsResponse } from '../../types/get_views';\n\n\nconst formatTimestamp = (\n  timestamp: string,\n  granularity: string\n): string => {\n  const date = new Date(Number(`${timestamp.slice(0, 8)}0000`));\n\n  if (granularity === 'daily') {\n\n    return String(date.getDate());\n\n  } else if (granularity === 'weekly') {\n\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(date.getDate() - date.getDay());\n    return startOfWeek.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n\n  } else if (granularity === 'monthly') {\n\n    return date.getMonth().toLocaleString();\n  }\n\n  throw new Error(`Unsupported granularity: ${granularity}`);\n}\n\n\nexport const transformPageViews = (\n  data: PageViewsItem[],\n  period: number\n): PageViewsResponse => {\n  const granularity = periodsMap.get(period);\n\n  if (!granularity) {\n    throw new Error(`Invalid period: ${period}`);\n  }\n\n  if (granularity === 'weekly') {\n    const weeklyMap = new Map<string, number>();\n\n    data.forEach((item) => {\n      const date = new Date(Number(`${item.timestamp.slice(0, 8)}0000`));\n      const startOfWeek = new Date(date);\n      startOfWeek.setDate(date.getDate() - date.getDay()); // Sunday\n\n      const label = startOfWeek.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n\n      const currentViews = weeklyMap.get(label) || 0;\n      weeklyMap.set(label, currentViews + item.views);\n    });\n\n    return {\n      labels: [...weeklyMap.keys()],\n      views: [...weeklyMap.values()],\n    };\n  }\n\n  // For daily and monthly, no change\n  const labels: string[] = [];\n  const views: number[] = [];\n\n  data.forEach((item) => {\n    labels.push(formatTimestamp(item.timestamp, granularity));\n    views.push(item.views);\n  });\n\n  return {\n    labels,\n    views,\n  };\n};\n","import type { Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../constants/response\";\nimport RequestHandler from \"../services/request\";\nimport logger from \"../services/logger\";\nimport { transformPageViews } from \"./utils/helpers\";\nimport type { GetPageViewsPayload } from \"../types/get_views\";\n\n\nconst getViewsHandler = async (\n    validationResult: GetPageViewsPayload,\n    res: Response\n) => {\n    try {\n        const result = await RequestHandler.getPageData(validationResult);\n\n        if (!result?.items) {\n            res.status(StatusCode.NOT_FOUND).json({\n                error: ErrorMessage.RESOURCE_NOT_FOUND\n            });\n            return;\n        }\n\n        const data = transformPageViews(result.items, validationResult.period)\n\n        res.status(StatusCode.OK).json(data);\n    } catch (err) {\n        logger.error(`${ErrorMessage.FAILED_TO_GET_VIEWS}: ${err}`);\n\n        res.status(StatusCode.INTERNAL_SERVER_ERROR).json({\n            error: ErrorMessage.FAILED_TO_GET_VIEWS\n        });\n    }\n}\n\nexport default getViewsHandler;","import type { Request, Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../constants/response\";\nimport { handleGetViewsQueryValidation } from \"./utils/validation\";\nimport getViewsHandler from \"../handlers/getViewsHandler\";\n\nconst getViewsController = async (\n    req: Request,\n    res: Response) => {\n\n    try {\n        const validationResult = handleGetViewsQueryValidation(req.query, res);\n\n        // Check if validation failed\n        if (!validationResult) {\n            return;\n        }\n\n        getViewsHandler(validationResult, res);\n    } catch (err) {\n        console.warn(`${ErrorMessage.FAILED_TO_GET_VIEWS}: ${err}`);\n\n        res.status(StatusCode.INTERNAL_SERVER_ERROR).send(ErrorMessage.FAILED_TO_GET_VIEWS);\n    }\n}\n\nexport default getViewsController;"],"mappings":"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","names":["chalk","axios","dotenv","express","cors"]}