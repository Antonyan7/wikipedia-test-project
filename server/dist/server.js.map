{"version":3,"sources":["../server.ts","../constants/configs.ts","../services/logger.ts","../middlewares/loggingMiddleware.ts","../middlewares/notFoundMiddleware.ts","../utils/typeGuards.ts","../controllers/utils/periods.ts","../controllers/utils/validation.ts","../services/request.ts","../utils/helpers.ts","../services/cache.ts","../models/utils/helpers.ts","../models/getViewsModel.ts","../controllers/getViewsController.ts","../controllers/healthCheckController.ts"],"sourcesContent":["import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\n\nimport { DEFAULT_PORT } from \"./constants/configs\";\nimport logger from \"./services/logger\";\nimport loggingMiddleware from \"./middlewares/loggingMiddleware\";\nimport notFoundMiddleware from \"./middlewares/notFoundMiddleware\";\nimport getViewsController from \"./controllers/getViewsController\";\nimport healthCheckController from \"./controllers/healthCheckController\";\n\n\n// Set up\ndotenv.config();\nconst app = express();\n\n\n// Middlewares\napp.use(cors({ origin: '*' }))\napp.use(loggingMiddleware);\n\n\n// Routes\napp.get(\"/\", healthCheckController);\napp.get(\"/get_views\", getViewsController);\n\n\n// Catch-all middleware\napp.use(notFoundMiddleware);\n\n\n// Start the server\nconst port = process.env.PORT || DEFAULT_PORT;\n\napp.listen(port, () => {\n    logger.info(`Server listening to port: ${port}`);\n})\n","export const WIKIPEDIA_API_URL = \"https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia.org/all-access/all-agents\";\n\nexport const DEFAULT_TTL_IN_MINUTES = 120;\n\nexport const DEFAULT_PORT = 3030;","import chalk from 'chalk';\n\nclass Logger {\n  private getTimestamp() {\n    return new Date().toISOString();\n  }\n\n  public info(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.green('INFO')}: ${message}`;\n    console.log(log);\n  }\n\n  public error(\n    message: string,\n    err?: Error | unknown\n  ) {\n    const errorDetails = err ? `${message}, Error: ${(err as Error).message}` : message;\n\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.redBright('ERROR')}: ${errorDetails}`;\n    console.log(log);\n  }\n\n  public warn(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.yellowBright('WARN')}: ${message}`;\n    console.log(log);\n  }\n\n  public debug(message: string) {\n    const log = `[${chalk.gray(this.getTimestamp())}] ${chalk.cyanBright('DEBUG')}: ${message}`;\n    console.log(log);\n  }\n}\n\nexport default new Logger();\n","import type { Request, Response, NextFunction } from 'express';\n\nimport logger from '../services/logger';\n\nconst loggingMiddleware = (\n    req: Request,\n    _: Response,\n    next: NextFunction\n): void => {\n    // Gather log details\n    const remoteAddr = req.ip || req.socket.remoteAddress || '-';\n    const method = req.method;\n    const url = req.originalUrl || req.url;\n    const referrer = req.get('Referrer') || req.get('Referer') || '-';\n    const userAgent = req.get('User-Agent') || '-';\n\n    // Format log message\n    const logMessage = `\"${method}\" \"${url}\" \"${remoteAddr}\" \"${referrer}\" \"${userAgent}\"`;\n\n    logger.info(logMessage);\n\n    next();\n}\n\nexport default loggingMiddleware;","import type { Request, Response } from 'express';\n\nimport { ErrorMessage, StatusCode } from '../constants/response';\n\nconst notFoundMiddleware = (\n    _: Request,\n    res: Response,\n): void => {\n    res.status(StatusCode.NOT_FOUND).json({\n        error: ErrorMessage.RESOURCE_NOT_FOUND\n    });\n}\n\nexport default notFoundMiddleware","// Type guard to check if a value is a non-empty string\nexport const isNonEmptyString = (\n    value: unknown\n): value is string => {\n    return typeof value === \"string\" && value.trim().length > 0;\n}\n\n// Type guard to check if a value is a positive integer\nexport const isPositiveInteger = (\n    value: unknown\n): value is number => {\n    if (typeof value === \"string\") {\n        const num = Number(value);\n        return Number.isInteger(num) && num > 0;\n    }\n\n    return typeof value === \"number\" && Number.isInteger(value) && value > 0;\n}\n","import type { Period, Granularity } from \"../../types/getViews\";\n\n\nexport const periodsMap =  new Map<Period, Granularity>([\n    [30, 'daily'],\n    [90, 'weekly'],\n    [365, 'monthly']\n]);","import type { Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../../constants/response\";\nimport { isNonEmptyString, isPositiveInteger } from \"../../utils/typeGuards\";\nimport { periodsMap } from \"./periods\";\nimport type { GetPageViewsDto } from \"../../types/getViews\";\n\n\nexport const handleGetViewsQueryValidation = (\n    query: Record<string, unknown>,\n    res: Response): GetPageViewsDto | undefined => {\n\n    let { period, name } = { ...query };\n    period = Number(period);\n\n    if (!period || !name) {\n        res.status(StatusCode.BAD_REQUEST).json({\n            error: ErrorMessage.MISSING_GET_VIEWS_QUERY_PARAMS\n        });\n        return;\n    }\n\n    if (!isPositiveInteger(period) || !isNonEmptyString(name)) {\n        res.status(StatusCode.BAD_REQUEST).json(\n            { error: ErrorMessage.WRONG_GET_VIEWS_QUERY_PARAMS }\n        );\n        return;\n    }\n\n    const granularity = periodsMap.get(period);\n\n    if (!granularity) {\n        res.status(StatusCode.BAD_REQUEST).json(\n            { error: `Period not allowed. Allowed periods are: ${Array.from(periodsMap.keys()).join(\", \")}` }\n        );\n        return;\n    }\n\n    return { granularity, period, name };\n}","import axios, { type AxiosInstance } from 'axios';\n\nimport { WIKIPEDIA_API_URL } from '../constants/configs';\nimport { getFormattedDate } from '../utils/helpers';\nimport type { GetPageViewsDto, PageViewsRetrievedData } from '../types/getViews';\n\ninterface RequestHandler {\n    getPageData(argsObj: GetPageViewsDto): Promise<PageViewsRetrievedData | null>\n}\n\nclass RequestHandler {\n    static instance: RequestHandler | null = null;\n    private axiosInstance: AxiosInstance;\n\n    private constructor() {\n        const requestBaseUrl = WIKIPEDIA_API_URL;\n\n        this.axiosInstance = axios.create({\n            baseURL: requestBaseUrl,\n        });\n\n        console.log(\"Request class initialized with:\", requestBaseUrl);\n    }\n\n    static getInstance(): RequestHandler {\n        if (!RequestHandler.instance) {\n            RequestHandler.instance = new RequestHandler();\n        }\n        return RequestHandler.instance;\n    }\n\n    async getPageData(\n        argsObj: GetPageViewsDto\n    ): Promise<PageViewsRetrievedData | null> {\n        try {\n            let { name, period, granularity } = { ...argsObj };\n\n            const currentDate = Date.now();\n            const startDate = currentDate - (period * 24 * 60 * 60 * 1000);\n\n            console.log(\"curr\" , currentDate);\n            \n            console.log(\"start\", startDate, new Date(startDate) );\n            \n\n            if(granularity === \"weekly\") granularity = \"daily\";\n\n            const url = `/${name}/${granularity}/${getFormattedDate(startDate)}/${getFormattedDate(currentDate)}`;\n\n            console.log(url);\n            \n            const result = await this.axiosInstance.get(url)\n\n            return result.data;\n        } catch (err) {\n\n            return null;\n        }\n\n    }\n}\n\nexport default RequestHandler.getInstance();","export const getFormattedDate = (dateNumber: number) => {\n  const date = new Date(dateNumber);\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so +1\n  const day = String(date.getDate()).padStart(2, '0');\n\n  return `${year}${month}${day}`;\n};\n\n\nexport const safeParse = (input: string) => {\n  try {\n    return JSON.parse(input);\n  } catch (_) {\n    return input;\n  }\n}\n","import { createClient, type RedisClientType } from \"redis\";\n\nimport { DEFAULT_TTL_IN_MINUTES } from \"../constants/configs\";\nimport { safeParse } from \"../utils/helpers\";\nimport logger from \"./logger\";\n\ninterface RedisClient {\n    set(key: string, value: unknown, identificator?: string, ttlInMinutes?: number): Promise<void>;\n    remove(key: string, identificator?: string): Promise<void>;\n    disconnect(): Promise<void>;\n}\n\nclass RedisClient {\n    static instance: RedisClient | undefined;\n    private redisClient: RedisClientType | undefined;\n\n    private constructor() {\n        if (!this.redisClient) {\n            try {\n                const redisClient = createClient({\n                    url: process.env.REDIS_URL,\n                })\n\n                redisClient.connect().then(() => {\n                    logger.info(\"Connected to Redis\");\n                })\n\n                this.redisClient = redisClient as RedisClientType;\n            } catch (err) {\n                logger.error(\"Failed to connect to Redis\", err);\n            }\n        }\n    }\n\n    static getInstance(): RedisClient {\n        if (!this.instance) {\n            this.instance = new RedisClient();\n        }\n\n        return this.instance;\n    }\n\n    private getStorageKey(\n        key: string,\n        identificator?: string | number\n    ): string {\n        return key + (identificator ? `_${identificator}` : '');\n    }\n\n    async set(\n        key: string,\n        value: unknown,\n        identificator?: string | number,\n        ttlInMinutes: number = DEFAULT_TTL_IN_MINUTES\n    ): Promise<void> {\n        if (!this.redisClient) {\n            logger.warn(\"Redis not connected!\");\n            return;\n        }\n\n        const storageKey = this.getStorageKey(key, identificator);\n\n        try {\n            await this.redisClient.set(\n                storageKey,\n                JSON.stringify(value),\n                {\n                    EX: ttlInMinutes * 60 * 1000,\n                }\n            );\n        } catch (err) {\n            logger.error(\"Failed to set value in Redis\", err);\n        }\n    }\n\n    async get<T = unknown>(\n        key: string,\n        identificator?: string | number,\n    ): Promise<T | void> {\n        if (!this.redisClient) {\n            logger.warn(\"Redis not connected!\");\n            return;\n        }\n\n        try {\n            const storageKey = this.getStorageKey(key, identificator);\n\n            const result = await this.redisClient.get(storageKey);\n            if (!result) return;\n\n            return safeParse(result);\n        } catch (err) {\n            logger.error(\"Failed to set value in Redis\", err);\n        }\n    }\n\n\n    async remove(\n        key: string,\n        identificator?: string,\n    ): Promise<void> {\n        if (!this.redisClient) {\n            console.warn(\"Redis not connected!\");\n            return;\n        }\n\n        const storageKey = this.getStorageKey(key, identificator);\n\n        try {\n            await this.redisClient.del(storageKey);\n        } catch (err) {\n            logger.error(\"Failed to set value in Redis\", err);\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        if (this.redisClient) {\n            try {\n                await this.redisClient.disconnect();\n            } catch (err) {\n                logger.warn(\"Failed to disconnect\");\n            }\n        } else {\n            logger.warn(\"Redis not connected!\");\n        }\n    }\n}\n\nexport default RedisClient.getInstance();","import { periodsMap } from '../../controllers/utils/periods';\nimport type { PageViewsItem, PageViewsResponse, Period } from '../../types/getViews';\n\n\nconst formatTimestamp = (\n  timestamp: string,\n  granularity: string\n): string => {\n  console.log(timestamp);\n  \n  // const date = new Date(timestamp);\n  // console.log(date);\n  \n\n  // console.log(date.toDateString());\n  \n  if (granularity === 'daily') {\n\n    const day = parseInt(timestamp.slice(6, 8), 10);\n\n    // console.log(date.getDate());\n    // console.log(date.getDay());\n    \n    return String(day);\n    \n\n  } else if (granularity === 'weekly') {\n\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(date.getDate() - date.getDay());\n    return startOfWeek.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n\n  } else if (granularity === 'monthly') {\n\n    const month = parseInt(timestamp.slice(4, 6), 10) - 1;\n\n    console.log(\"monthly\",month);\n    \n    return String(month);\n  }\n\n  throw new Error(`Unsupported granularity: ${granularity}`);\n}\n\n\nexport const transformPageViews = (\n  data: PageViewsItem[],\n  period: number\n): PageViewsResponse => {\n  console.log(\"here\");\n  \n  const granularity = periodsMap.get(period as Period);\n\n  if (!granularity) {\n    throw new Error(`Invalid period: ${period}`);\n  }\n\n  const labels: string[] = [];\n  const views: number[] = [];\n\n  if (granularity === \"weekly\") { }\n\n  console.log({granularity});\n  \n  data.forEach((item) => {\n    labels.push(formatTimestamp(item.timestamp, granularity));\n    views.push(item.views);\n  });\n\n  return {\n    labels,\n    views,\n  };\n};\n","import type { Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../constants/response\";\nimport RequestHandler from \"../services/request\";\nimport cache from \"../services/cache\";\nimport logger from \"../services/logger\";\nimport { transformPageViews } from \"./utils/helpers\";\nimport type { GetPageViewsDto } from \"../types/getViews\";\n\n\nconst getViewsModel = async (\n    validationResult: GetPageViewsDto,\n    res: Response,\n) => {\n    try {\n        const { name, period } = { ...validationResult };\n\n        // Check the cache for requested data\n        const cachedResult = await cache.get(name, period);\n\n        if(cachedResult) {\n            res.status(StatusCode.OK).json(cachedResult);\n            return;\n        }\n\n        // Retrieve the data \n        const result = await RequestHandler.getPageData(validationResult);\n\n        if (!result?.items) {\n            res.status(StatusCode.NOT_FOUND).json({\n                error: ErrorMessage.RESOURCE_NOT_FOUND\n            });\n            return;\n        }\n\n        // Update cache if needed\n        const data = transformPageViews(result.items, validationResult.period);\n\n        // cache.set(name, data, period);\n\n\n        res.status(StatusCode.OK).json(data);\n    } catch (err) {\n        logger.error(`${ErrorMessage.FAILED_TO_GET_VIEWS}: ${err}`);\n\n        res.status(StatusCode.INTERNAL_SERVER_ERROR).json({\n            error: ErrorMessage.FAILED_TO_GET_VIEWS\n        });\n    }\n}\n\nexport default getViewsModel;","import type { Request, Response } from \"express\";\n\nimport { ErrorMessage, StatusCode } from \"../constants/response\";\nimport { handleGetViewsQueryValidation } from \"./utils/validation\";\nimport getViewsModel from \"../models/getViewsModel\";\n\n\nconst getViewsController = async (\n    req: Request,\n    res: Response) => {\n\n    try {\n        const validationResult = handleGetViewsQueryValidation(req.query, res);\n\n        // Check if validation failed\n        if (!validationResult) {\n            return;\n        }\n\n        getViewsModel(validationResult, res);\n    } catch (err) {\n        console.warn(`${ErrorMessage.FAILED_TO_GET_VIEWS}: ${err}`);\n\n        res.status(StatusCode.INTERNAL_SERVER_ERROR).json({\n            error: ErrorMessage.FAILED_TO_GET_VIEWS\n        });\n    }\n}\n\nexport default getViewsController;","import type { Request, Response } from \"express\";\n\nimport { StatusCode } from \"../constants/response\";\n\n\nconst healthCheckController = (\n    _: Request,\n    res: Response) => {\n\n    res.status(StatusCode.OK).json({\n        info: \"Server running!\"\n    })\n}\n\nexport default healthCheckController;"],"mappings":"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","names":["chalk","date","axios","dotenv","express","cors"]}